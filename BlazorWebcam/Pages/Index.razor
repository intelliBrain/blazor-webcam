@page "/"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@implements IDisposable
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.Drawing
@using SixLabors.ImageSharp.Drawing.Processing
@using SixLabors.ImageSharp.Processing;
@using SixLabors.ImageSharp.Formats.Jpeg
@using SixLabors.Fonts
@using System.Net.Http
@using System.IO
@using System.Diagnostics

<h1>Blazor Webcam</h1>
<div style="z-index: 0; position: relative; width: 320px; height: 240px;">
    <video id="videoFeed" style="display: block; object-fit: cover; width: 100%; height: 100%; border: 2px solid orange" width="320" height="240" />
    <canvas id="canvasVideo" style="display: hidden; width: 100%; height: 100%; position: absolute; top: 0; left: 0; border: 1px solid red" />
    <canvas id="canvasTrack" style="width: 100%; height: 100%; position: absolute; top: 0; left: 0; border: 1px solid blue" />
</div>
<canvas class="d-none" style="border: 3px solid red;" id="currentFrame" width="320" height="240" /><br />
<input class="form-control mb-3" style="width:320px;" type="text" @bind="captionText" placeholder="Enter caption" />
<button class="btn btn-primary mb-3" @onclick="CaptureFrame">Capture Frame</button> <br />
@if (!string.IsNullOrEmpty(frameUri))
{
    <img src="@frameUri" />
}

<p>QR CODE: [@xxx]</p>

@code {
    private string captionText;
    private string frameUri;
    private string xxx = "";

    FontCollection collection = new FontCollection();
    FontFamily sansFamily;
    Font captionFont;
    DotNetObjectReference<Index> dotNetObjectReference;

    protected override async Task OnInitializedAsync()
    {
        dotNetObjectReference = DotNetObjectReference.Create(this);
        //var dotNetHelper = DotNetObjectReference.Create(this);

        Console.WriteLine("OnInitializedAsync");
        await JSRuntime.InvokeVoidAsync("startVideo", dotNetObjectReference, "videoFeed", "canvasVideo", "canvasTrack");

        //Font stored in wwwroot. Fetch it as byte array, and use it
        var fontBytes = await Http.GetByteArrayAsync("OpenSans-Regular.ttf");
        collection.Install(new MemoryStream(fontBytes));
        collection.TryFind("Open Sans", out sansFamily);
        captionFont = sansFamily.CreateFont(16, FontStyle.Regular);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {

        }
    }

    private async Task CaptureFrame()
    {
        //var dotNetHelper = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeAsync<String>("getFrame", dotNetObjectReference, "videoFeed", "currentFrame");
    }

    [JSInvokable]
    public void QRCodeDetected(string code)
    {
        var qrCode = code.ToString();
        Console.WriteLine($"QRCodeDetected: {qrCode}");

        xxx = qrCode ?? "**No Code**";
        //dotnetHelperType = DateTime.Now.ToLongTimeString();
        StateHasChanged();
    }

    [JSInvokable]
    public void ProcessImage(string imageString)
    {
        byte[] imageData = Convert.FromBase64String(imageString.Split(',')[1]);

        //Do image processing here

        DrawingOptions alignCenter = new DrawingOptions()
        {
            TextOptions = new TextOptions()
            {
                VerticalAlignment = VerticalAlignment.Center,
                WrapTextWidth = 304, //Image is 320px wide. This will center with 8px margin on left and right
                HorizontalAlignment = HorizontalAlignment.Center
            }
        };

        using (var image = Image.Load(imageData))
        {
            image.Mutate(x => x
                //.Flip(FlipMode.Horizontal) //To match mirrored webcam image
                .Fill(Color.ParseHex("0008"), new RectangularPolygon(0,220, 320, 20)) //Set footer bar for caption
                .DrawText(alignCenter, $"{captionText} @ {DateTime.Now:HH:mm:ss}", captionFont, Color.White, new PointF(8, 230)) //center in footer bar)
            );
            frameUri = image.ToBase64String(JpegFormat.Instance);
        }
    }

    public async void Dispose()
    {
        GC.SuppressFinalize(this);

        if (dotNetObjectReference != null)
        {
           await JSRuntime.InvokeVoidAsync("stopVideo");
           dotNetObjectReference.Dispose();
        }
    }
}